<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows连接Linux服务器进行深度学习</title>
      <link href="/2022/09/06/windows-lian-jie-linux-fu-wu-qi-jin-xing-shen-du-xue-xi/"/>
      <url>/2022/09/06/windows-lian-jie-linux-fu-wu-qi-jin-xing-shen-du-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><ul><li>许多新手第一次买了<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>都不知道该怎样使用，尤其是没有接触过<code>linux</code>的朋友对命令行界面几乎不了解，今天就记录下使用国外软件<code>xshell</code>连接<code>linux</code>服务器的过程，供参考。</li><li>因为很多实验都要在<code>服务器</code>上运行，因为自己电脑显卡算力不足。</li></ul><h2 id="1-下载Xshell-和-Xftp"><a href="#1-下载Xshell-和-Xftp" class="headerlink" title="1.下载Xshell 和 Xftp"></a>1.下载<code>Xshell</code> 和 <code>Xftp</code></h2><ul><li>可以去  <a href="https://www.xshell.com/zh/xshell/">官网</a> 下载</li></ul><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062027508.png"></p><p>点击<code>下载</code>之后，往下翻找到<code>家庭/学校免费</code></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062028525.png"></p><p>然后填写<code>名字</code>和<code>邮箱</code>（邮箱必须填写能正常收邮件的，因为邮件里有下载链接），下载选上<code>两者</code>，两个软件后面我们都能用到。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062030199.png"></p><p>然后便是下载和安装了。（建议不要安装在c盘，空间大的忽略）</p><ul><li>也可以用我给的分享链接下载（截止到2022.09.06最新）<ul><li>​    <a href="https://pan.quark.cn/s/6fc7b54d3b6e">夸克</a></li><li>   <a href="https://pan.baidu.com/s/1PbqMiCqAd_YtPVtsEcsRuw?pwd=6666">百度网盘</a> [ 提取码：6666 ]</li></ul></li></ul><h2 id="2-连接服务器"><a href="#2-连接服务器" class="headerlink" title="2.连接服务器"></a>2.连接服务器</h2><p>打开软件，点击<code>新建</code></p><p>下图的几个界面依次输入名称，ip(服务商给你的ip地址如192.168.1.1)，端口号(一般为22)等信息。然后点击<code>连接</code> 。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062041724.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062048141.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062049103.png"></p><p>之后出现这样的界面就连接成功</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062050142.png"></p><ul><li><p>然后你对服务器的一切操作都可以再这个终端操作了。既然选择了<code>Linux</code>系统，应该要适应这种纯命令行操作，熟悉之后效率会高很多。</p></li><li><h3 id="GPU状态"><a href="#GPU状态" class="headerlink" title="GPU状态"></a>GPU状态</h3></li><li><p>进入之后可能大家最想关注的就是GPU占用情况，可以使用一下两种命令来查看一下~</p></li></ul><pre class="line-numbers language-base" data-language="base"><code class="language-base">watch -n 1 nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062053840.png"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">watch --color -n 1 gpustat --color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062054180.png"></p><pre class="line-numbers language-base" data-language="base"><code class="language-base">其中，-n是代表刷新时间，1就是每秒刷新一次；--color是加颜色好看一点QwQ，去掉也可以按ctrl+z可以退出哦~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-传输文件"><a href="#3-传输文件" class="headerlink" title="3.传输文件"></a>3.传输文件</h2><ul><li>如果显卡有空闲，我们就可以准备跑代码啦~</li><li>不过首先需要把代码和数据集复制到服务器上。这里推荐使用<code>Xftp</code>，和<code>Xshell</code>一块下载的软件。</li></ul><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062057280.png"></p><ul><li>在<code>Xshell</code>中点击这个按钮就可以传输文件了，界面十分友好，直接把<code>Windows</code>的文件拖过去就行了</li></ul><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202209062104935.png"></p><ul><li><p>甚至可以像Windows一样操作Linux里的文件哦。</p></li><li><p>要想运行python文件，除了坏境外（服务器上要用Anaconda不然人多容易乱掉），还要把文件的访问权限更改一下，如果是小白没有特殊需求的话可以直接。</p></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">chmod 777 xxx.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>当然也可以不用动（如果害怕的话！~）</p></li><li><p>777就是把权限拉满。如果有不希望其他人访问这个文件等其他需求，可以查一下<code>linux</code>文件访问权限的相关知识随意修改。</p></li><li><h3 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h3><ul><li>如果文件较大，直接传输会比较慢，可以先压缩成压缩包形式（文件后缀为  <code>.zip</code>  ）</li><li>等传输好了，可以在 <code>Xshell</code> 里面使用指令 <code>unzip  xxxx.zip</code> 解压</li><li>不过在解压时要切换到传输后文件所在目录 例如  <code>cd /data0</code></li></ul></li></ul><h2 id="4-运行代码"><a href="#4-运行代码" class="headerlink" title="4.运行代码"></a>4.运行代码</h2><ul><li>安装好<code>Anaconda</code> ，并创建好 <code>虚拟环境</code></li><li>使用指令 <code>conda activate 环境名称</code>  或者  <code>activate 环境名称</code> ，激活虚拟环境 （然后根据情况修改文件权限）</li><li>即可运行代码：</li></ul><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">python xxx.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过我们可能需要并行运行多种参数的代码</p><ul><li><p>在命令后面加上&amp;即可让命令在后台执行。为了能看到训练日志，可以使用&gt;将输出重定向到一个文件中（否则会直接打印到屏幕上）</p></li><li><p>运行的时候代码中要调的参数用 <code>argparse</code>（比较常见的东西，如果你读别人的代码的话几乎都是用这个的）</p></li><li><p>比如要调整<code>dropout</code>参数和<code>lr</code>~参数：</p></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">python train.py --dropout=0.6 --lr=0.005 &gt; log_001.txt &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>用jobs命令可以查看后台任务的运行状况（任务号、进程号、stopped、running等），在前台运行的程序用<code>ctrl+z</code>可以<code>stop</code>它并丢到后台，用<code>bg [任务号]</code> （不含方括号，介绍<code>linux</code>命令的文档都是这种格式哦）命令可以让stopped的任务继续在后台跑，用<code>fg[任务号]</code>命令可以让后台的任务来前台执行。</p></li><li><p>为了防止忘记上面调了那些参数，可以把命令写成<code>shell</code>脚本，即创建一个<code>xxx.sh</code>文件，把上面的这条命令放进去，然后赋予文件权限后用 <code>./xxx.sh</code> 即可</p></li><li><p>还可以在y前面加上指令指定使用哪块<code>GPU</code>，比如   就是使用0号<code>GPU</code>。</p></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">CUDA_VISIBLE_DEVICES=0 python train.py --dropout=0.6 --lr=0.005 &gt; log_001.txt &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>注意：对于<code>TensorFlow</code>用户而言，程序中新建Session时一定要设置<code>gpu_options.allow_growth</code>为<code>True</code>。否则 <code>TensorFlow</code> 会占用掉你选中显卡的所有显存</p></li><li><p>有时候可能想要跑多个参数，可以把多个参数放到.sh文件中让它一个一个跑，然后就可以愉快地摸鱼去啦~</p></li></ul><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h2><p>1.<a href="https://zhuanlan.zhihu.com/p/336869005">在服务器上进行深度学习的入门教程</a></p><p>2.<a href="https://blog.csdn.net/xhxzdxm/article/details/116068199">Xshell 安装及连接服务器训练深度学习模型</a></p><p>3.<a href="https://cloud.tencent.com/developer/article/1182215">windows下用 Xshell 连接Linux服务器</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keil合并</title>
      <link href="/2022/06/17/keil-he-bing/"/>
      <url>/2022/06/17/keil-he-bing/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Keil-C51、MDK？"><a href="#一、什么是Keil-C51、MDK？" class="headerlink" title="一、什么是Keil C51、MDK？"></a>一、什么是Keil C51、MDK？</h2><p>Keil C51和MDK是Keil公司开发的两套不同的工具集，包括了<a href="https://so.csdn.net/so/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&amp;spm=1001.2101.3001.7020">编译器</a>、链接器等工具，以及集成了这些工具的集成开发环境（IDE），这个集成开发环境叫uvision。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172327755.png"></p><h2 id="二、为什么要合并？"><a href="#二、为什么要合并？" class="headerlink" title="二、为什么要合并？"></a>二、为什么要合并？</h2><p>我们在安装MDK与Keil C51中的任意一个时，都会同时自动安装uvision开发环境。<br>例如下载到Keil C51是这样一个<a href="https://so.csdn.net/so/search?q=%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6&amp;spm=1001.2101.3001.7020">可执行文件</a>(.exe文件)</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172328169.png" alt="img"></p><p>安装后，在安装目录下会产生UV4文件夹</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172328582.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172329717.png"></p><p>但是我们有时候还会用到ARM内核的单片机如STM32、 K60等。Keil公司为这些单片机开发了另外一套工具即MDK。同样的方式安装MDK后，将同样自动安装一个uvision开发环境。可以在MDK的安装目录下的UV4文件夹下找到UV4.exe。如果你的电脑上同时安装了Keil C51和MDK，你会发现在MDK对应的uvision开发环境下是无法创建51单片机的工程的。<br>例如在打开MDK的开发环境后新建工程（New Project）时，在选择CPU时，下拉表框只有一个Software Packs选项。Software Packs（软件包）是以包的形式来支持芯片，一般都是比较新的芯片，如STM32、K60等。而51内核单片机属于传统设备（Legacy device）。显然此时在MDK5下是无法创建51工程的。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172330413.png"></p><p>如果打开Keil C51的开发环境（打开在Keil C51的安装目录下的UV4文件夹下找到UV4.exe）并新建工程时只有这样的界面</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172330865.png"></p><p>这也说明了在安装Keil C51和MDK时虽然都自动安装了uvision开发环境，但实际上如果同时安装了Keil C51和MDK，它们自动安装了两个<strong>不同</strong>的uvision开发环境。<br>我们希望MDK与Keil C51能够共用一个uvision，这样我们在打开IDE并新建工程时，可以根据需要选择51内核单片机或ARM内核单片机。而不再需要区分究竟打开的是MDK的IDE还是Keil C51的IDE。</p><h2 id="三、合并方法"><a href="#三、合并方法" class="headerlink" title="三、合并方法"></a>三、合并方法</h2><p>1、在不同的目录下安装Keil C51和MDK(关于安装和注册的方法可以自行搜索，安装的先后顺序没有关系，推荐先安装Keil C51)</p><p>2、完成安装后，将Keil C51安装目录下的TOOLS.INI文件（用记事本打开）中从[C51]开始直至结束的内容复制下来</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172331706.png"></p><p>3、在MDK安装目录下同样找到TOOLS.INI文件（用记事本打开），并将上面复制的内容粘贴到文件的末尾（另起一行），最后保存该文件。</p><p>4、此时再打开MDK对应的开发环境并新建工程时，会发现多了一个Legacy Device选项，选中它就可以在MDK的开发环境下开发51单片机程序。至此已完成Keil C51合并到MDK的开发环境中。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202206172331675.png"></p><p>5、如果先安装MDK再安装Keil C51也没有关系。由于后安装的Keil C51生成的开发环境的桌面上的快捷方式会覆盖掉先安装的MDK的uvision的快捷方式。所以在桌面上看到的快捷方式是Keil C51对应的开发环境。由于我们是将Keil C51合并到MDK的开发环境中，因此只要在MDK的安装目录下找到UV4文件夹下的UV4.exe并右击创建快捷方式，将快捷方式复制到桌面上，并删除原来桌面上的Keil C51对应的开发环境的快捷方式即可。（如果先安装Keil C51后安装MDK则省去这一步)</p>]]></content>
      
      
      
        <tags>
            
            <tag> -KEILc51与MDK的合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统2</title>
      <link href="/2022/05/09/xin-hao-yu-xi-tong-2/"/>
      <url>/2022/05/09/xin-hao-yu-xi-tong-2/</url>
      
        <content type="html"><![CDATA[<h2 id="傅立叶变换的性质"><a href="#傅立叶变换的性质" class="headerlink" title="傅立叶变换的性质"></a>傅立叶变换的性质</h2><p><img src="https://img-blog.csdnimg.cn/20201118150802736.png"></p><h3 id="1-线性性质"><a href="#1-线性性质" class="headerlink" title="1.线性性质"></a>1.线性性质</h3><p><img src="https://img-blog.csdnimg.cn/20201118150937113.png"></p><h3 id="2-延时性质"><a href="#2-延时性质" class="headerlink" title="2.延时性质"></a>2.延时性质</h3><p><img src="https://img-blog.csdnimg.cn/20201118155400117.png#pic_center"></p><blockquote><p>一个信号在时域中延迟一时间t0,对信号的幅度频谱没有影响，但对信号的相位频谱产生影响，具体为：在频域中所有的信号频谱分量都将给予一个对频率呈线性关系的滞后相移w*t0。</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091934472.png"></p><h3 id="3-移频特性"><a href="#3-移频特性" class="headerlink" title="3.移频特性"></a>3.移频特性</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091935673.png"></p><blockquote><p>此式说明：一个信号在时域中与$e^(jω_0 t)$相乘，等效于在频域中将整个频谱向频率增大的方向搬移$w_0$。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091942478.png"></p></blockquote><blockquote><p>频移特性的实质是<code>频谱搬移</code>，它是通信理论中信号<code>调制</code>与<code>解调</code>的理论基础。</p></blockquote><p>但在实际中并不会把实函数乘以复指数函数，而是乘以正弦函数，可以利用<code>欧拉公式</code>进行变换。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091948370.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091948000.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091943449.png"></p><p>调频：反映在时域就是用一高频正弦信号去乘调制信号，反映在频域就是把调制信号的频谱搬移了一个频率，在搬移的过程中，信号频谱的结构保持不变。实施调频的方法就是在时域中乘一个高频正弦波。</p><h3 id="4-尺度变换特征"><a href="#4-尺度变换特征" class="headerlink" title="4.尺度变换特征"></a>4.尺度变换特征</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091949840.png"></p><h3 id="5-奇偶性"><a href="#5-奇偶性" class="headerlink" title="5.奇偶性"></a>5.奇偶性</h3><h3 id="6-对称性"><a href="#6-对称性" class="headerlink" title="6.对称性"></a>6.对称性</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091955063.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205091956738.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205092008696.png"></p><h3 id="7-卷积特性"><a href="#7-卷积特性" class="headerlink" title="7.卷积特性"></a>7.卷积特性</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205092011986.png"></p><p>8.微分特性</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205092012487.png"></p><h3 id="9-积分特性"><a href="#9-积分特性" class="headerlink" title="9.积分特性"></a>9.积分特性</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205092013040.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -信号与系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统-1</title>
      <link href="/2022/05/07/xin-hao-yu-xi-tong/"/>
      <url>/2022/05/07/xin-hao-yu-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><hr><h2 id="一、信号表示为三角傅里叶级数"><a href="#一、信号表示为三角傅里叶级数" class="headerlink" title="一、信号表示为三角傅里叶级数"></a>一、信号表示为三角傅里叶级数</h2><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108180.png"></p><blockquote><p><strong>三角级数的另一种表示</strong></p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108163.png"></p><blockquote><p>解释</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108193.png"></p><blockquote><p><strong>信号展成傅里叶级数的条件</strong> ———狄利克雷条件</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108161.png"></p><p>实际信号一般都能满足<strong>狄氏条件</strong>。</p><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><blockquote><p><strong>把如图所示周期方波信号用三角傅里叶级数表示</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108157.png"></p><p><strong>求系数</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108168.png"></p><p><strong>取前面若干项的近似结果</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108757.png"></p><p>会出现“<code>吉布斯</code>”现象。</p></blockquote><hr><h2 id="二、函数奇偶性及傅里叶级数"><a href="#二、函数奇偶性及傅里叶级数" class="headerlink" title="二、函数奇偶性及傅里叶级数"></a>二、函数奇偶性及傅里叶级数</h2><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108832.png"></p><h3 id="1-f-t-为偶函数"><a href="#1-f-t-为偶函数" class="headerlink" title="1.f(t)为偶函数"></a>1.f(t)为偶函数</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108794.png"></p><blockquote><p>偶函数的展开项只有<code>余弦项谐波分量</code>和<code>直流分量</code>，而没有<code>正弦项谐波分量</code></p></blockquote><h3 id="2-f-t-为奇函数"><a href="#2-f-t-为奇函数" class="headerlink" title="2.f(t)为奇函数"></a>2.f(t)为奇函数</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108857.png"></p><blockquote><p>奇函数的展开项只有<code>正弦项谐波分量</code>。</p></blockquote><h3 id="3-f-t-为偶谐函数"><a href="#3-f-t-为偶谐函数" class="headerlink" title="3.f(t)为偶谐函数"></a>3.f(t)为偶谐函数</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108874.png"></p><blockquote><p>偶谐函数的展开项只有<code>偶次余弦项</code>和<code>直流分量</code></p></blockquote><h3 id="4-f-t-为奇谐函数"><a href="#4-f-t-为奇谐函数" class="headerlink" title="4.f(t)为奇谐函数"></a>4.f(t)为奇谐函数</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108836.png"></p><blockquote><p>奇谐函数的展开项只有<code>奇次正弦项</code></p></blockquote><p><strong>总结</strong></p><pre class="line-numbers language-base" data-language="base"><code class="language-base">在求an,bn时，利用公式，根据奇偶函数在对称区间的积分关系:可知当f(t)为奇函数时，an=0,故没有余弦项谐波分量和直流分量，只有正弦项谐波分量;当f(t)为偶函数时，bn=0,故没有正弦项谐波分量，只有余弦项谐波分量和直流分量;对于奇谐函数和偶谐函数，他们本身就是特殊的奇函数和偶函数，所以首先应满足奇函数和偶函数的展开,然后，对于奇谐函数，只有奇次正弦项的谐波分量;对于偶谐函数，只有偶次余弦项的谐波分量和直流分量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、信号表示为指数傅里叶级数"><a href="#三、信号表示为指数傅里叶级数" class="headerlink" title="三、信号表示为指数傅里叶级数"></a>三、信号表示为指数傅里叶级数</h2><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108235.png"></p><h2 id="四、三角傅里叶级数与指数傅里叶级数的关系"><a href="#四、三角傅里叶级数与指数傅里叶级数的关系" class="headerlink" title="四、三角傅里叶级数与指数傅里叶级数的关系"></a>四、三角傅里叶级数与指数傅里叶级数的关系</h2><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108339.png"></p><hr><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108539.png"></p><h2 id="五、信号的频谱"><a href="#五、信号的频谱" class="headerlink" title="五、信号的频谱"></a>五、信号的频谱</h2><p>信号的某种特征量随频率变化的关系，称为<strong>信号的频谱</strong>，所画出的图形称为信号的<strong>频谱图</strong>。</p><p><strong>周期信号的频谱</strong>是指傅里叶基数展开式中谐波振幅、相位随频率的变化关系。</p><blockquote><p><em>A</em>n ~ <em>ω</em> <strong>关系图</strong>：<strong>振幅频谱图。</strong></p><p>φn ~ <em>ω</em> <strong>关系图</strong>：<strong>相位频谱图</strong></p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108299.png"></p><h3 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h3><blockquote><p><strong>周期方波信号</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108423.png"></p></blockquote><h4 id="频谱的特点"><a href="#频谱的特点" class="headerlink" title="频谱的特点"></a>频谱的特点</h4><ol><li>离散性：频谱由不连续的谱线组成，每一条谱线代表一谐波分量</li><li>谐波性：谱线只存在于基波及各次谐波频率上  </li><li>收敛性：随着频率ω的增加，振幅 <em>A</em>n将逐渐减小</li></ol><h4 id="周期矩形脉冲信号的频谱分析"><a href="#周期矩形脉冲信号的频谱分析" class="headerlink" title="周期矩形脉冲信号的频谱分析"></a>周期矩形脉冲信号的频谱分析</h4><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108263.png"></p><h5 id="1-复振幅"><a href="#1-复振幅" class="headerlink" title="1.复振幅"></a>1.复振幅</h5><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108666.png"></p><h5 id="2-抽样函数"><a href="#2-抽样函数" class="headerlink" title="2.抽样函数"></a>2.抽样函数</h5><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108731.png"></p><h5 id="3-频谱图"><a href="#3-频谱图" class="headerlink" title="3.频谱图"></a>3.频谱图</h5><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108960.png"></p><hr><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205072108847.png"></p><p><strong>总结</strong></p><blockquote><p>谱线间隔：</p><p>主瓣宽度：</p><p>幅度：</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082158456.png"></p><p>当周期趋向于无穷时，谱线间的间隔趋于0，就成了连续频谱。同时由于周期无限增大，幅度的模也趋向于无穷小。这时信号中各频率分量的幅度虽然都是无穷小，但是它们并不是相同的，便在等式两边乘上T/2，当T趋于无穷大时，可以避免这个量趋于无穷小。</p><p>由此引入了傅里叶变换。</p><blockquote><p>非周期信号可以看成周期信号在周期趋于无穷时的极限。</p></blockquote><h2 id="六、傅里叶变换"><a href="#六、傅里叶变换" class="headerlink" title="六、傅里叶变换"></a>六、傅里叶变换</h2><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082200146.png"></p><p><strong>正变换</strong></p><blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082212494.png" alt="正变换"></p><p>$F(jω)称为原函数f(t)的频谱密度函数，简称频谱函数$</p></blockquote><p><strong>反变换</strong></p><blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082217733.png" alt="反变换"></p></blockquote><p><strong>表示</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082218494.png"></p><h3 id="门函数的频谱"><a href="#门函数的频谱" class="headerlink" title="门函数的频谱"></a>门函数的频谱</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082228307.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082229503.png"></p><h4 id="门函数的频谱图"><a href="#门函数的频谱图" class="headerlink" title="门函数的频谱图"></a>门函数的频谱图</h4><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082250761.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082250181.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082252955.png"></p><h4 id="周期与非周期矩形脉冲的比较"><a href="#周期与非周期矩形脉冲的比较" class="headerlink" title="周期与非周期矩形脉冲的比较"></a>周期与非周期矩形脉冲的比较</h4><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082252324.png"></p><p><strong>总结：</strong></p><blockquote><p>周期性脉冲频谱的包络线形状和非周期性单脉冲的频谱函数曲线的形状完全相同，都具有抽样函数的形状！</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082256602.png"></p><p>但周期信号的谱是离散的，非周期信号的谱是连续的。</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082258944.png"></p><h3 id="七、常用的傅里叶变换对"><a href="#七、常用的傅里叶变换对" class="headerlink" title="七、常用的傅里叶变换对"></a>七、常用的傅里叶变换对</h3><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082259152.png"></p><p><strong>1.单边指数函数</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082309023.png"></p><blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082307981.png"></p><p>a必须大于0，否则分f(t)不符合绝对可积条件，傅立叶变换也就不存在。</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082309160.png"></p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082310217.png"></p><p><strong>2.双边指数函数</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082315839.png"></p><blockquote><p>a也必须大于0，否则傅立叶变换不存在！</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082316740.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082318827.png"></p></blockquote><p><strong>3.冲激函数</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082320631.png"></p><blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082320397.png"></p></blockquote><p>4.单位阶跃函数</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082331498.png"></p><p>5.直流信号</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082332206.png"></p><blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082333384.png"></p></blockquote><blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082334339.png"></p></blockquote><p><strong>6.符号函数</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082335915.png"></p><p><strong>总结</strong></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202205082336109.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -信号与系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+Typora+阿里云oss创建个人图床</title>
      <link href="/2022/04/20/picgo-typora-a-li-yun-oss-chuang-jian-ge-ren-tu-chuang/"/>
      <url>/2022/04/20/picgo-typora-a-li-yun-oss-chuang-jian-ge-ren-tu-chuang/</url>
      
        <content type="html"><![CDATA[<p><strong>PicGo+Typora+阿里云创建图床</strong></p><h2 id="设置阿里云oss"><a href="#设置阿里云oss" class="headerlink" title="设置阿里云oss"></a>设置阿里云oss</h2><hr><blockquote><p>打开阿里云,要注册账户！</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201300570.png"></p><blockquote><p>然后点击立即开通，开通后选择<code>管理控制台</code></p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201302803.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201353743.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201351534.png" alt="开通成功"></p><blockquote><p>创建Bucket列表</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201306886.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201311990.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201309393.png"></p><blockquote><p>创建好bucket之后 鼠标放在右上角头像上不用点击，出现下面这个页面之后进入<code>AccessKey管理</code></p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201312765.png"></p><blockquote><p>选择<code>继续使用AccessKey</code></p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201314041.png"></p><blockquote><p>然后点击<code>创建AccessKey</code></p></blockquote><p>会有手机验证，验证之后，并接收到Key ID和另外一个信息（会下载一个excel表格）要保存好，后面用</p><p>可以复制也可以下载csv文件！后面要用！</p><hr><h2 id="设置PicGo"><a href="#设置PicGo" class="headerlink" title="设置PicGo"></a>设置PicGo</h2><blockquote><p>PicGo下载地址 : <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p></blockquote><p>往下翻找到这里</p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201322461.png"></p><p>下载之后解压然后安装</p><blockquote><p>记住安装路径！</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201323047.png" alt="下载后打开"></p><blockquote><p>把端口设置为36677（一般默认是36677），最好还是看一遍！</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201324426.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201325188.png"></p><blockquote><p>用不到的不用显示</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201326987.png"></p><blockquote><p>然后就是图床设置</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201331492.png"></p><blockquote><p>找到你的Bucket列表</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201335400.png"></p><blockquote><p>设置好之后，PicGo重启</p></blockquote><hr><h2 id="设置-Typora"><a href="#设置-Typora" class="headerlink" title="设置 Typora"></a>设置 Typora</h2><blockquote><p>首先进行基础设置</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201338432.png"></p><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201343538.png"></p><blockquote><p>重启之后 <strong>执行上述第七步</strong> 会出现下图页面点击<code>ok</code>即可</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201344539.png" alt="成功了！"></p><h2 id="大功告成了！"><a href="#大功告成了！" class="headerlink" title="大功告成了！"></a>大功告成了！</h2><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><pre class="line-numbers language-base" data-language="base"><code class="language-base">推荐最好是单独创建一个用户来单独操作OSS（用户的定义就是需要访问云资源的人员或应用程序），这样给这个用户赋予单独的访问OSS的权限，更加安全方便。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>为了安全在选择AccessKey时，可以在获取AccessKey时使用子用户AccessKey.</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201403150.png"></p><blockquote><p>或者点击自己头像，然后选择访问控制，如下图所示：</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201400773.png"></p><blockquote><p>点击用户，选择创建用户，之后进行用户配置，注意要勾选Open API调用访问，控制台密码登录可以不选择，登录名称，显示名称自己设定，如下图所示：</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201407789.png"></p><blockquote><p>确定后得到创建用户的信息，这里要记下AccessKey ID 和 AccessKeySecret，之后配置PicGo用到<code>(填在PicGo里面的)</code>，因为这个界面关掉之后就不好找了，所以最好记在记事本里，如下图所示：</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201401081.png"></p><blockquote><p>设置用户权限，使得用户只能访问OSS的服务。点击添加权限，如下图所示：</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201401980.png"></p><blockquote><p>选择管理对象存储服务权限，点击确定，如下图所示：</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201401097.png"></p><blockquote><p>这样就好了</p></blockquote><hr><h3 id="文件存在哪里"><a href="#文件存在哪里" class="headerlink" title="文件存在哪里"></a>文件存在哪里</h3><blockquote><p>在控制台里找到文件管理</p></blockquote><p><img src="https://cqdong.oss-cn-hangzhou.aliyuncs.com/202204201415809.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机</title>
      <link href="/2022/04/17/dan-pian-ji/"/>
      <url>/2022/04/17/dan-pian-ji/</url>
      
        <content type="html"><![CDATA[<hr><p>分享学习单片机的总结~~</p><hr><hr><hr><h1 id="1、定时器基础知识"><a href="#1、定时器基础知识" class="headerlink" title="1、定时器基础知识"></a>1、定时器基础知识</h1><p>实现定时/计数，有3种主要方法：软件延时、数字电路硬件定时和可编程定时/计数器。</p><h3 id="软件定时："><a href="#软件定时：" class="headerlink" title="软件定时："></a>软件定时：</h3><p>让机器执行一个程序段，这个程序段本身没有具体的目的，通过挑选适当的指令和设置合适的循坏次数来实现软件延时，由于执行每条指令都需要时间，执行这个程序段所需要的时间就是延时时间。常见的指令有for循环，通过改过循环次数来改变延时的时间。</p><p>缺点：软件延时占用CPU，降低CPU的利用率。</p><h3 id="数字电路硬件定时："><a href="#数字电路硬件定时：" class="headerlink" title="数字电路硬件定时："></a>数字电路硬件定时：</h3><p>采用小规模集成电路器件，外接定时部件（电阻和电容）。通过改变电阻和电容的值来改变定时范围。</p><p>缺点：硬件电路连接好之后，不方便修改。</p><h3 id="可编程定时-计数器："><a href="#可编程定时-计数器：" class="headerlink" title="可编程定时/计数器："></a>可编程定时/计数器：</h3><p>硬件定时，同时可以通过软件来确定和改变它的定时值，通过初始化编程，能够满足各种定时和计数需求，也是应用较多的一种方式。</p><p><strong>时钟周期</strong>：即时钟源频率频率（晶振）分之一。</p><p><strong>机器周期</strong>：为12个时钟周期。机器周期就是定时器的计数周期，在我们设定好初值之后，每经过一个机器周期，定时器自动加1，加到一定数值之后就会溢出。对于8位的定时器，加到255后再加1溢出；对于16位的定时器，加到65535后再加1溢出。</p><p>定时器既可以工作在定时方式也可以工作在计数方式。</p><p>这两种方式本质都是对脉冲进行计数，不过所计脉冲的来源不同。常用的是定时方式，（以T0为例）每过一个机器周期，计数器的初值加1，直至计满预设的个数，TH0和TL0回零，溢出中断标志位TF0置1，产生溢出中断。当我们设定了定时器的工作方式并启动后，定时器就按照规定的方式工作，不占用CPU的操作时间，此时CPU可以执行其他其他程序，除非定时器溢出，才会中断CPU正在执行的程序（类似于人在工作或者睡觉的时候，手表依然滴滴滴滴在走，到了设定的时间，闹钟会响）。</p><h2 id="定时器应用："><a href="#定时器应用：" class="headerlink" title="定时器应用："></a>定时器应用：</h2><p><strong>①</strong> 设置特殊功能寄存器TMOD，配置好工作模式。<br><strong>②</strong> 设置计数寄存器THO和TL0的初值。<br><strong>③</strong> 设置TCON，通过TRO置1来让定时器开始计数。<br><strong>④</strong> 判断TCON寄存器的TF0位，监测定时器溢出情况。</p><h3 id="定时器的寄存器-（TCON-amp-TMOD）"><a href="#定时器的寄存器-（TCON-amp-TMOD）" class="headerlink" title="定时器的寄存器 （TCON &amp; TMOD）"></a>定时器的寄存器 （TCON &amp; TMOD）</h3><h4 id="定时器模式寄存器——TMOD"><a href="#定时器模式寄存器——TMOD" class="headerlink" title="定时器模式寄存器——TMOD"></a><strong>定时器模式寄存器——TMOD</strong></h4><table><thead><tr><th>位</th><th align="center">7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>符号</td><td align="center">GATE</td><td>C/T</td><td>M1</td><td>M0</td><td>GATE</td><td>C/T</td><td>M1</td><td>M0</td></tr></tbody></table><p><img src="/.top//Users\chaoqun\myblog\hexo\source_posts\单片机\1.png"></p><ul><li>GATE : 门控信号；GATE=0, TRx=1时，可启动定时器工作;GATE=1,除TRx=1外,还需INTx= 1才可启动定时器工作。（x=0,1）</li><li>C/T    : 定时/计数器选择控制位。置1为计数器，置0为定时器。</li><li>M1 M0：定时器工作模式选择：（主要用方式1）</li></ul><p><img src="https://img-blog.csdnimg.cn/20200724110114182.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//首先设置定时器工作模式TMOD</span><span class="token comment">//GATE设置为0 : 定时器的启动仅受TCON中的TR0/TR1控制</span><span class="token comment">//C/T位设置为0使其工作在定时器模式下</span><span class="token comment">//M1M0设置为01,使用16位计数,即方式1</span>TMOD <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment">//启动定时器0    0000 0001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定时器初值寄存器—THx-TLx"><a href="#定时器初值寄存器—THx-TLx" class="headerlink" title="定时器初值寄存器—THx/TLx"></a>定时器初值寄存器—THx/TLx</h4><p>以定时器T0为例，其的工作原理是，每当晶振产生一次脉冲，就将该寄存器TL0加一，当TL0加满溢出后，将TL0清空，TH0加一，TH0计满后产生定时中断(此时TF0自动置1,向CPU申请中断,进入中断程序后TF0自动清零)。即TH0与TL0组成了一个16位的计数器，这个计数器可以从0x0000（0）加到0xffff（65535）,再加1便溢出,即进入中断。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//定时器T0的高8位赋初值</span>TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//定时器T0的高8位赋初值</span><span class="token comment">//也可以用16进制</span><span class="token comment">//TH1=(65536-50000)/256; //定时器T1的高8位赋初值</span><span class="token comment">//TL1=(65536-50000)%256; //定时器T1的高8位赋初值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定时器控制寄存器——TCON（高四位）"><a href="#定时器控制寄存器——TCON（高四位）" class="headerlink" title="定时器控制寄存器——TCON（高四位）"></a><strong>定时器控制寄存器——TCON</strong>（高四位）</h4><table><thead><tr><th>位</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>符号</td><td>TF1</td><td>TR1</td><td>TF0</td><td>TR0</td><td>IE1</td><td>IT1</td><td>IE0</td><td>IT0</td></tr></tbody></table><ul><li>**TF1 **：T1溢出中断请求标志。T1有溢出中断请求，TF1硬件置 1；T1无溢出中断请求，TF1 =0。有两种清零方式，软件清零和进入定时器中断时硬件清零。</li><li><strong>TR1</strong> :T1运行控制位。TR1=1，启动T1工作；TR1=0，停止T1工作。</li><li>**TF0 **：T0溢出中断请求标志。T1有溢出中断请求，TF0硬件置1；T0无溢出中断请求，TF0 =0。有两种清零方式，软件清零和进入定时器中断时硬件清零。</li><li><strong>TR0</strong> ：T0运行控制位。TR0=1，启动T1工作；TR0=0，停止T0工作。</li><li>注：硬件置1或清零是指符合条件后，单片机自动完成；软件置1或清零是指需要通过编写程序实现。</li><li>（定时器控制只用高四位）【低四位由中断使用】</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设置TCON高四位来启动定时器0</span><span class="token comment">//初始TF0为0,当溢出时TF1自动置1,申请中断，进入中断后，由硬件自动清零</span><span class="token comment">//用哪个定时器就设置哪个，如果使用T1就设置TR1=1;</span>TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-中断"><a href="#2-中断" class="headerlink" title="2.中断"></a>2.中断</h1><h2 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h2><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">小A正在学习。这时，他的朋友小B叫他一块儿吃鸡，小A停止学习，转去玩吃鸡游戏。玩了几局后，关掉游戏，继续学习。小A正在学习。这时，他的朋友小B叫他一块儿吃鸡，小A停止学习，转去玩吃鸡游戏，（吃鸡过程中，小A女朋友打来电话，于是挂机游戏，去接电话，接完电话，继续游戏。）玩了几局后，关掉游戏，继续学习。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="几个重要概念"><a href="#几个重要概念" class="headerlink" title="几个重要概念"></a>几个重要概念</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">中断：小A学习被小B打断的过程就称为中断。中断源：小B被称为中断源。中断服务程序：小A执行的玩游戏操作称为中断服务程序中断优先级：小A女朋友的电话比游戏优先级高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">-</span> 中断的发生：CPU在处理某一事件A时，发生了另一事件B请求CPU迅速去处理。    <span class="token operator">-</span> 中断响应和中断服务：CPU暂时中断当前的工作，转去处理事件B    <span class="token operator">-</span> 中断返回：CPU将事件B处理完成后，再回到原来事件A被中断的地方继续处理事件A。    <span class="token operator">-</span> 中断源：    <span class="token number">1</span>、外部中断：当外部中断引脚信号产生跳变（低电平→高电平）时引起中断。<span class="token number">2</span>、定时器<span class="token operator">/</span>计数器中断：当计数器计满溢出时引起跳变。<span class="token number">3</span>、串口中断：串行端口完成一帧数据的发送<span class="token operator">/</span>接受时引起（如蓝牙传输）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上整个过程即为中断。52单片机有6个中断源。它们在程序存储器中有固定的中断入口地址，当CPU响应中断时，硬件自动形成这些地址，由此进入中断服务程序；5个中断源有两级中断优先级，可形成中断嵌套。</p><p><img src="/.top//Users\chaoqun\myblog\hexo\source_posts\单片机\2.png"></p><p>使用定时器时一般也会用到中断，但要注意定时器和中断不是一个概念，<strong>定时器是单片机模块的一个资源，而中断只是单片机的一种中断机制</strong>。</p><h3 id="中断控制有关的寄存器"><a href="#中断控制有关的寄存器" class="headerlink" title="中断控制有关的寄存器"></a>中断控制有关的寄存器</h3><h4 id="中断允许控制寄存器-IE"><a href="#中断允许控制寄存器-IE" class="headerlink" title="中断允许控制寄存器 IE"></a>中断允许控制寄存器 IE</h4><p>该寄存器的主要功能是<strong>控制中断的开启与关闭</strong>，共7个有效位，包含一个全局中断控制位和6个中断源的控制位。</p><table><thead><tr><th align="center">位</th><th align="center">D7</th><th align="center">D6</th><th align="center">D5</th><th align="center">D4</th><th align="center">D3</th><th align="center">D2</th><th align="center">D1</th><th align="center">D0</th></tr></thead><tbody><tr><td align="center">符号</td><td align="center">EA</td><td align="center">-</td><td align="center">ET2</td><td align="center">ES</td><td align="center">ET1</td><td align="center">EX1</td><td align="center">ET0</td><td align="center">EX0</td></tr></tbody></table><ul><li>EA 全局中断允许位，当此位是1时中断可用。</li><li>ET2 定时器/计数器2中断允许位。*</li><li>ES 串口中断允许位。</li><li>ET1 定时器/计数器1中断允许位。*</li><li>EX1 外部中断1允许位。</li><li>ET0 定时器/计数器0中断允许位。*</li><li>EX0 外部中断0允许位。</li><li>要使用定时器中断，需要将IE寄存器中的EA位设置为1，以及需要将ETx(x = 0,1,2)设置为1。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//启动中断计时器</span>EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打开总中断</span>ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开启定时器0中断</span><span class="token comment">//用到EXn时即外部中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定时器控制寄存器——TCON（低四位）"><a href="#定时器控制寄存器——TCON（低四位）" class="headerlink" title="定时器控制寄存器——TCON（低四位）"></a><strong>定时器控制寄存器——TCON</strong>（低四位）</h4><table><thead><tr><th>位</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>符号</td><td>TF1</td><td>TR1</td><td>TF0</td><td>TR0</td><td>IE1</td><td>IT1</td><td>IE0</td><td>IT0</td></tr></tbody></table><ul><li><strong>IE1</strong>：外部中断1（INT1）运行控制位。IE1=1.启动INT1控制；IE1=0，停止INT1控制。</li><li><strong>IT1</strong>：外部中断1（INT1）触发方式控制位。IT1=1，下降沿触发；IT1=0，低电平触发。</li><li><strong>IE0</strong>：外部中断0（INT0）运行控制位。IE0=1.启动INT1控制;IE0=0，停止INT1控制。</li><li><strong>IT0</strong>：外部中断0（INT0）触发方式控制位。IT0=1，下降沿触发；IT0=0，低电平触发。</li><li>如果用的是定时器/计时器根本用不到低四位，全部置零即可</li></ul><h4 id="中断优先级管理寄存器——IP"><a href="#中断优先级管理寄存器——IP" class="headerlink" title="中断优先级管理寄存器——IP"></a><strong>中断优先级管理寄存器——IP</strong></h4><table><thead><tr><th align="center">位</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">符号</td><td align="center">-</td><td align="center">-</td><td align="center">PT2</td><td align="center">PS</td><td align="center">PT1</td><td align="center">PX1</td><td align="center">PT0</td><td align="center">PX0</td></tr></tbody></table><h5 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h5><p><img src="/.top//Users\chaoqun\myblog\hexo\source_posts\单片机\3.png"></p><h4 id="定时器中断程序写法-综上"><a href="#定时器中断程序写法-综上" class="headerlink" title="定时器中断程序写法(综上)"></a>定时器中断程序写法(综上)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">TMOD<span class="token operator">=</span><span class="token number">0x11</span><span class="token punctuation">;</span><span class="token comment">//使用定时器T0的模式1  定时器T1的模式1</span>TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//定时器T0的高8位重新赋初值</span>TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//定时器T0的高8位重新赋初值</span> TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 启动定时器T0 </span>EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//中断总开关开</span>ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定时器T0中断允许  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中断服务程序"><a href="#中断服务程序" class="headerlink" title="中断服务程序"></a>中断服务程序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt 中断号 using 工作组<span class="token punctuation">{</span>    TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//定时器T0的高8位重新赋初值</span>TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//定时器T0的高8位重新赋初值</span>   <span class="token comment">//中断中要重新装载初值 </span>    <span class="token comment">//所要执行内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">定时器T0为方式1定时器T1为方式3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>1.中断服务函数要写在主函数后面，且不需要声明 。</li><li>2.中断服务函数无返回值，所以用void</li><li>3.函数名可以随便起</li><li>4.interrupt后的中断号由下表的重点服务号确定</li><li>5.using 工作组可省略不写</li></ul><h1 id="3-串口通信"><a href="#3-串口通信" class="headerlink" title="3.串口通信"></a>3.串口通信</h1><pre class="line-numbers language-none"><code class="language-none">串口是一种引用十分广泛的通讯接口，串口的成本低、容易使用、通信线路简单，可实现两个设备的互相通信。51单片机、树莓派、Wemos D1等开发板，都自带UART（通用异步收发器），可以实现串口通信。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><h4 id="并行通信"><a href="#并行通信" class="headerlink" title="并行通信"></a>并行通信</h4><p>将数据字节的多位用多根数据线连接同时进行传送。<br>优点：控制简单、传输速度快。<br>缺点：长距离通信时，成本高且接受方的各位同时接收存在困难。</p><p><img src="https://img-blog.csdnimg.cn/2018120212365934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4ODE2OTI0,size_16,color_FFFFFF,t_70"></p><h4 id="串行通信"><a href="#串行通信" class="headerlink" title="串行通信"></a>串行通信</h4><p>将数据字节分成一位一位的形式在一条传输线上进行数据传输。<br>优点：传输线少、长距离传输成本低。<br>缺点：传输控制相对并行困难。</p><p><img src="https://img-blog.csdnimg.cn/20181202123813525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4ODE2OTI0,size_16,color_FFFFFF,t_70"></p><h5 id="异步串行通信"><a href="#异步串行通信" class="headerlink" title="异步串行通信"></a>异步串行通信</h5><p>异步通信是指通信中两个字符（8位）之间的时间间隔是不固定的，而在一个字符内各位的时间间隔是固定的。</p><p>异步通信是以字符（构成的帧）为单位进行传输，字符与字符之间的间隙（时间间隔）是任意的，但每个字符中的各位是以固定的时间传送的，即字符之间不一定有“位间隔”的整数倍的关系，但同一字符内的各位之间的距离均为“位间隔”的整数倍。</p><p>通信的发送与接收设备使用格子的时钟控制数据的发送和接受过程。为了使双方的手法协调，要求发送和接收设备的时钟尽可能一致</p><img src="https://img-blog.csdnimg.cn/20210506124426658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTM2MzMyNg==,size_16,color_FFFFFF,t_70#pic_center" alt="" style="zoom:80%;"><img src="https://img-blog.csdnimg.cn/20210506124426657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTM2MzMyNg==,size_16,color_FFFFFF,t_70#pic_center" alt="" style="zoom:80%;"><pre class="line-numbers language-none"><code class="language-none">异步通信特点：1.不要求收发双方时钟的严格一致2.容易实现3.设备开销较小4.每个字符需要附加2到3位用于起止位5.各帧之间还有间隔6.传输效率不高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="同步串行通信"><a href="#同步串行通信" class="headerlink" title="同步串行通信"></a>同步串行通信</h5><p>一种比特同步通信技术，要求发收双方具有同频同相的同步时钟信号，只需在传送报文的最前面附加特定的同步字符，使发收双方建立同步，此后便在同步时钟的控制下逐位发送/接收。</p><p>同步通信时要建立发送方时钟对接收方时钟的直接控制，使双方达到完全同步。此时，传输数据的位之间的距离均为“位间隔”的整数倍，同时传送的字符间不留间隙，即保持位同步关系，也保持字符同步关系。发送方对接收方的同步可以通过两种方法实现</p><p><img src="https://img-blog.csdnimg.cn/202105061244140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTM2MzMyNg==,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="串口通信传输方向"><a href="#串口通信传输方向" class="headerlink" title="串口通信传输方向"></a>串口通信传输方向</h3><ul><li>单工是指数据传输仅能沿一个方向，不能实现反向传输。</li><li>半双工是指数据传输可以沿两个方向，但需要分时进行。</li><li>全双工是指数据可以同时进行双向传输。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210506124400818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTM2MzMyNg==,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="串行通信的错误校验"><a href="#串行通信的错误校验" class="headerlink" title="串行通信的错误校验"></a>串行通信的错误校验</h3><ul><li>奇偶校验</li></ul><pre class="line-numbers language-none"><code class="language-none">在发送数据时，数据位尾随的1位为奇偶校验位（1/0）。奇校验时，数据中1的个数与检验位1的个数之和应为奇数；偶校验时，数据中1的个数与校验位1的个数之和应为偶数。接收字符时，对1的个数进行校验，若字符不一致，则说明传输数据过程中出现错误。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>代码和校验</li></ul><pre class="line-numbers language-none"><code class="language-none">发送方将所发数据块求和（或各字节异或），产生一个字节的校验字符（校验和）附加到数据块末尾。接收方接收数据时，同时对数据块（除校验字节外）求和（或各字节异或），将所得的结果与发送方的“校验和”进行比较，一致则无差。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>循环冗余校验</li></ul><pre class="line-numbers language-none"><code class="language-none">通过某种数学预算实现有效信息与校验位之间的循环校验，常用语对磁盘信息的传输、存储区的完整性校验。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="串口通信硬件电路"><a href="#串口通信硬件电路" class="headerlink" title="串口通信硬件电路"></a>串口通信硬件电路</h3><ul><li>简单的串口通信有两根通信线（发送端TXD 和 接收端RXD）。</li><li>TXD 和 RXD 需要交叉连接。</li><li>当只需要单向传输时，也可以只接一根传输线。</li><li>当电平标标准不一致时，需要加电平转换芯片。</li></ul><img src="https://img-blog.csdnimg.cn/20210506125819351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTM2MzMyNg==,size_16,color_FFFFFF,t_70#pic_center" alt="" style="zoom: 50%;"><h3 id="常见接口介绍"><a href="#常见接口介绍" class="headerlink" title="常见接口介绍"></a>常见接口介绍</h3><img src="/.top//Users\chaoqun\AppData\Roaming\Typora\typora-user-images\image-20220203191504955.png" alt="" style="zoom:80%;"><h2 id="串口相关寄存器详解"><a href="#串口相关寄存器详解" class="headerlink" title="串口相关寄存器详解"></a>串口相关寄存器详解</h2><p>SCON、SBUF、PCON、TMOD</p><p><strong>（串口通信波特率设置占用定时计数器1）</strong></p><h3 id="1、串行口控制寄存器SCON"><a href="#1、串行口控制寄存器SCON" class="headerlink" title="1、串行口控制寄存器SCON"></a>1、串行口控制寄存器SCON</h3><p>SCON：用来设定串行口的工作方式、接受/发送控制以及设置状态指示。</p><table><thead><tr><th>位</th><th>D7</th><th>D6</th><th>D5</th><th>D4</th><th>D3</th><th>D2</th><th>D1</th><th>D0</th></tr></thead><tbody><tr><td>符号</td><td>SM0</td><td>SM1</td><td>SM2</td><td>REN</td><td>TB8</td><td>RB8</td><td>TI</td><td>RI</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">SM0 SM1:串行工作方式选择<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/.top//Users\chaoqun\myblog\hexo\source_posts\单片机\4.png"></p><p><strong>SM2</strong>：多机通讯控制位。在方式0时，SM2一定要等于0。在方式1中，当（SM2）=1则只有接收到有效停止位时，RI才置1。在方式2或方式3当（SM2）=1且接收到的第九位数据RB8=0时，RI才置1。</p><pre class="line-numbers language-none"><code class="language-none">REN：接收允许控制位。由软件置位以允许接收，又由软件清0来禁止接收。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>TB8</strong>: 是要发送数据的第9位。在方式2或方式3中，要发送的第9位数据，根据需要由软件置1或清0。例如，可约定作为奇偶校验位，或在多机通讯中作为区别地址帧或数据帧的标志位。</p><p><strong>RB8</strong>：接收到的数据的第9位。在方式0中不使用RB8。在方式1中，若（SM2）=0，RB8为接收到的停止位。在方式2或方式3中，RB8为接收到的第9位数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TI：发送中断标志。在方式<span class="token number">0</span>中，第<span class="token number">8</span>位发送结束时，由硬件置<span class="token number">1</span>。在其它方式的发送停止位前，由硬件置<span class="token number">1</span>。TI置位既表示一帧信息发送结束，同时也是申请中断，可根据需要，用软件查询的方法获得数据已发送完毕的信息，或用中断的方式来发送下一个数据。<span class="token comment">//TI必须用软件清0。</span>RI：接收中断标志位。在方式<span class="token number">0</span>，当接收完第<span class="token number">8</span>位数据后，由硬件置位。在其它方式中，在接收到停止位的中间时刻由硬件置位（例外情况见于SM2的说明）。RI置位表示一帧数据接收完毕，可用查询的方法获知或者用中断的方法获知。<span class="token comment">//RI也必须用软件清0。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（注一般用方式1，且代码块中的需要设置，其他不用设置！）</p><p>故SCON设置如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-电源管理寄存器PCON"><a href="#2-电源管理寄存器PCON" class="headerlink" title="2.电源管理寄存器PCON"></a>2.电源管理寄存器PCON</h3><p>该寄存器只有一位与串行口工作有关！</p><table><thead><tr><th align="center">位</th><th align="center">D7</th><th align="center">D6</th><th align="center">D5</th><th align="center">D4</th><th align="center">D3</th><th align="center">D2</th><th align="center">D1</th><th align="center">D0</th></tr></thead><tbody><tr><td align="center">符号</td><td align="center">SMOD</td><td align="center">(SMOD0)</td><td align="center">(LVDF)</td><td align="center">(P0F)</td><td align="center">GF1</td><td align="center">GF0</td><td align="center">PD</td><td align="center">IDL</td></tr></tbody></table><p>SMOD：波特率倍增位。在串口工作在方式1,、方式2、方式3，波特率与SMOD有关。</p><p>当SMOD = 1时，波特率提高一倍。<br>当SMOD = 0时，不加倍。</p><p>故PCON设置如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">PCON<span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span><span class="token comment">//波特率加倍</span>PCON<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment">//波特率不加倍,也可以不用提！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用定时器1的方式1在中断中装初值的方法来求T1溢出率，在进入中断、装值、出中断的过程容易产生时间上的误差，多次操作时微小的误差不断积累终会产生错误。</p><p>有效的解决办法是使用T1定时器的工作方式2 : <strong>初值自动重装的8位定时器/计时器</strong></p><p><strong>（串口通信波特率设置占用定时计数器1）</strong></p><p>这里又用到了TMOD：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//当GATE=1时，“与门”的输出信号K由INTx输入电平和TRx位的状态一起决定(即此时K=TRx·INTx)</span><span class="token comment">//当且仅当TRx=1,INTx=1(高电平)时，计数启动；否则，计数停止。</span><span class="token comment">//当INT0引脚为高电平时且TR0置位，TR0=1；启动定时器T0；</span><span class="token comment">//当INT1引脚为高电平时且TR1置位，TR1=1；启动定时器T1。</span><span class="token comment">//当GATE=0时，“或门”输出恒为1，“与门”的输出信号K由TRx决定(即此时K=TRx)</span><span class="token comment">//定时器不受INTx输入电平的影响，由TRx直接控制定时器的启动和停止。</span><span class="token comment">//当TR0=1,启动定时器T0。</span><span class="token comment">//当TR1=1,启动定时器T1。</span>GATE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>M0 M1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>TMOD <span class="token operator">&amp;=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式              高四位清零</span>TMOD <span class="token operator">|=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式              方式2   M1 M0 = 1 0-------0x20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/16/hello-world/"/>
      <url>/2022/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
